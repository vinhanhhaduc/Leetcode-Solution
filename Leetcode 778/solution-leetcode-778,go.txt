func swimInWater(grid [][]int) int {
    n := len(grid)
    left, right := grid[0][0], n*n-1
    for left < right {
        mid := left + (right-left)/2
        if helper(grid, mid) {
            right = mid
        } else {
            left = mid + 1
        }
    }

    return left
}
func helper(grid [][]int, t int) bool {
    n := len(grid)

    if grid[0][0] > t {
        return false
    }
    directions := [][]int{{0, 1}, {1, 0}, {0, -1}, {-1, 0}}
    visited := make([][]bool, n)
    for i := range visited {
        visited[i] = make([]bool, n)
    }
    queue := [][]int{{0, 0}}
    visited[0][0] = true
    for len(queue) > 0 {
        point := queue[0]
        queue = queue[1:]
        x, y := point[0], point[1]
        if x == n-1 && y == n-1 {
            return true
        }
        for _, dir := range directions {
            nx, ny := x+dir[0], y+dir[1]
            if nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny] && grid[nx][ny] <= t {
                visited[nx][ny] = true
                queue = append(queue, []int{nx, ny})
            }
        }
    }
    return false
}